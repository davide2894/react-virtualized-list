import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "../styles/Home.module.css";
import { generateFakeData } from "@data";
import { initData } from "@fakeDataSlice";
import VirtualizedList from "@components/virtualizedList/VirtualizedList";
import log from "@utils/log";
import { useAppSelector } from "@customHooks/useAppSelector";
import { useAppDispatch } from "@customHooks/useAppDispatch";
import { useEffect, useState } from "react";
import { Row } from "@types";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const inter = Inter({ subsets: ["latin"] });

export default function Home(props: { serverSideData: Array<Row> }) {
  const [loading, setLoading] = useState(true);
  const serverSideData = props.serverSideData;
  const clientSideData = useAppSelector((state) => state.fakeDataReducer.data);
  const dispatch = useAppDispatch();
  log({ clientSideData, dataLength: serverSideData.length });

  let content;

  useEffect(() => {
    if (clientSideData.length) {
      setLoading(false);
    }
  }, [clientSideData]);

  useEffect(() => {
    dispatch(initData(serverSideData));
  }, [dispatch, serverSideData]);

  if (!loading) {
    content = (
      <div>
        <ToastContainer
          draggable={false}
          pauseOnHover
          position="bottom-left"
          className="toast-position"
        />
        <VirtualizedList data={clientSideData} />
      </div>
    );
  } else {
    content = <div>waiting for list...</div>;
  }

  return (
    <>
      <Head>
        <title>Virtualized list</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>{content}</div>
      </main>
    </>
  );
}

export const getServerSideProps = async () => {
  const serverSideData = await generateFakeData(100);
  console.log("test");
  return { props: { serverSideData } };
};
